name: Build Windows Wheel

on:
  workflow_dispatch:

jobs:
  build_windows_wheel:
    name: Build wheel for Windows on Python 3.11
    runs-on: windows-latest

    steps:
      # 1. Скачиваем код
      - uses: actions/checkout@v4

      # 2. Устанавливаем Python
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3. Устанавливаем Rust
      - uses: dtolnay/rust-toolchain@stable

      # 4. Готовим библиотеку TFLite из полного пакета TensorFlow
      - name: Prepare TFLite library from official TensorFlow package
        shell: pwsh
        run: |
          Write-Host "Installing full tensorflow package..."
          # Устанавливаем полный пакет tensorflow
          # Используем конкретную версию, чтобы избежать неожиданных обновлений
          pip install tensorflow==2.16.1 # Или другую стабильную версию, например, 2.15.0

          # Находим путь к .dll (она находится в site-packages/tensorflow/lite/python/)
          $tensorflow_lib_path = python -c "import tensorflow as tf; import os; print(os.path.join(os.path.dirname(tf.__file__), 'lite', 'python'))"
          $tflite_dll_path = Join-Path $tensorflow_lib_path "tensorflowlite_c.dll"

          if (-not (Test-Path $tflite_dll_path)) {
            Write-Error "TensorFlow Lite DLL not found at expected path: $tflite_dll_path"
            exit 1
          }
          Write-Output "TensorFlow Lite DLL found at: $tflite_dll_path"

          # Создаем директорию для работы
          mkdir tflite_lib
          $def_file = "tflite_lib/tflite.def"

          # Находим путь к инструментам MSVC (как и раньше)
          $vs_path = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $msvc_tool_path = (Get-ChildItem -Path (Join-Path $vs_path "VC\Tools\MSVC") -Recurse -Filter "dumpbin.exe" | Select-Object -First 1).DirectoryName
          $env:PATH = "$msvc_tool_path;" + $env:PATH
          
          # Создаем ПРАВИЛЬНО отформатированный .def файл
          "EXPORTS" | Out-File -FilePath $def_file -Encoding ascii

          $exports = dumpbin /EXPORTS $tflite_dll_path | Select-String "TfLite"
          if (-not $exports) {
             Write-Error "No TfLite symbols found in DLL. This might be the wrong DLL or a broken TensorFlow install."
             exit 1
          }
          foreach ($line in $exports) {
            $func_name = ($line.ToString().Split(' ')[-1]).Trim()
            if ($func_name) {
              $func_name | Add-Content -Path $def_file
            }
          }
          
          Write-Output "--- Content of generated .def file: ---"
          Get-Content $def_file
          Write-Output "----------------------------------------"
          
          # Создаем .lib файл из .def файла
          lib /DEF:$def_file /OUT:tflite_lib/tensorflowlite_c.lib /MACHINE:X64
          
          if (-not (Test-Path "tflite_lib/tensorflowlite_c.lib")) {
            Write-Error "Failed to create .lib file!"
            exit 1
          }
          Write-Output "Successfully created tensorflowlite_c.lib"

      # 5. Собираем "колесо"
      - name: Build wheel
        shell: bash
        run: |
          pip install maturin
          maturin build --release --out dist --find-interpreter

      # 6. Загружаем результат
      - uses: actions/upload-artifact@v4
        with:
          name: dtln-rs-wheel-windows-py311
          path: dist
