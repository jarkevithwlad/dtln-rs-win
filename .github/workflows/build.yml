name: Build Windows Wheel

on:
  workflow_dispatch:

jobs:
  build_windows_wheel:
    name: Build wheel for Windows on Python 3.11
    runs-on: windows-latest

    steps:
      # 1. Скачиваем код
      - uses: actions/checkout@v4

      # 2. Устанавливаем Python
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3. Устанавливаем Rust
      - uses: dtolnay/rust-toolchain@stable

      # 4. Готовим библиотеку TFLite (улучшенная версия)
      - name: Prepare TFLite library from official Python package
        shell: pwsh
        run: |
          # Устанавливаем официальный пакет
          pip install tflite-runtime
          
          # Находим путь к .dll
          $tflite_path = python -c "import tflite_runtime.interpreter as tflite; print(tflite._interpreter_wrapper._TFLITE_INTERPRETER_PATH)"
          if (-not (Test-Path $tflite_path)) {
            Write-Error "TFLite DLL not found!"
            exit 1
          }
          Write-Output "TFLite DLL found at: $tflite_path"
          
          # Создаем директории для работы
          mkdir tflite_lib
          $def_file = "tflite_lib/tflite.def"
          
          # --- КЛЮЧЕВОЕ ИСПРАВЛЕНИЕ ---
          # Создаем ПРАВИЛЬНО отформатированный .def файл
          # 1. Добавляем обязательный заголовок EXPORTS
          "EXPORTS" | Out-File -FilePath $def_file -Encoding ascii
          
          # 2. Находим путь к инструментам MSVC
          $vs_path = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $msvc_tool_path = (Get-ChildItem -Path (Join-Path $vs_path "VC\Tools\MSVC") -Recurse -Filter "dumpbin.exe" | Select-Object -First 1).DirectoryName
          $env:PATH = "$msvc_tool_path;" + $env:PATH
          
          # 3. Извлекаем имена функций, очищаем их и добавляем в .def файл
          $exports = dumpbin /EXPORTS $tflite_path | Select-String "TfLite"
          foreach ($line in $exports) {
            $func_name = ($line.ToString().Split(' ')[-1]).Trim()
            if ($func_name) {
              $func_name | Add-Content -Path $def_file
            }
          }
          
          # --- ДИАГНОСТИКА ---
          Write-Output "--- Content of generated .def file: ---"
          Get-Content $def_file
          Write-Output "----------------------------------------"
          
          # 4. Создаем .lib файл из .def файла
          lib /DEF:$def_file /OUT:tflite_lib/tensorflowlite_c.lib /MACHINE:X64
          
          # --- ФИНАЛЬНАЯ ПРОВЕРКА ---
          if (-not (Test-Path "tflite_lib/tensorflowlite_c.lib")) {
            Write-Error "Failed to create .lib file!"
            exit 1
          }
          Write-Output "Successfully created tensorflowlite_c.lib"

      # 5. Собираем "колесо"
      - name: Build wheel
        shell: bash
        run: |
          pip install maturin
          maturin build --release --out dist --find-interpreter

      # 6. Загружаем результат
      - uses: actions/upload-artifact@v4
        with:
          name: dtln-rs-wheel-windows-py311
          path: dist
